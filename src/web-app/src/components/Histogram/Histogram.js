import { Component } from "react";
import React from "react";
import { Header } from "semantic-ui-react";
import * as d3 from "d3";

import "./Histogram.css";

/**
 * Renders a histogram that reveals the frequency of bookings in a 1km interval bin,
 * using {distance interval => number of bookings} data.
 */
class Histogram extends Component {
  /** {object}  mobilityData Object containing a mapping of distance bins of 1km intervals => to the number of bookings */
  binData = this.props.mobilityData;
  /** {object}  dimension Object containing the width and height pixel dimensions of the histogram */
  dimension = this.props.dimension;

  componentDidMount() {
    this.generateHistogram();
  }

  generateHistogram() {
    /**
     * Generates a histogram using number bookings vs 1km distance interval bins.
     */
    let margin = { top: 50, right: 0, bottom: 50, left: 50 },
      height = this.dimension.height - margin.top - margin.bottom,
      width = this.dimension.width - margin.left - margin.right;

    // A formatter for counts.
    let formatCount = d3.format(",.0f");

    // pass list of number of bookings to _binData
    let _binData = Object.values(this.binData);
    let dataset = [];

    /** generate a list of distance values, by exploding the {binData} using the lower bound
     * of the km bins as distance and its associated number of bookings as frequency of occurence in the list.
     * In orther words, this expoldes the {binData} such that a distance appears the number of times of
     * its booking.
     * Example: if {this.binData} is 0-1km=>3, 1-2km=>1, 2-3km=>2, and _binData = [3, 1, 2]
     * {dataset} becomes [0, 0, 0, 1, 2, 2].
     */
    _binData.forEach((item, index) => {
      for (let i = 0; i < item; i++) {
        dataset.push(index);
      }
    });

    /** scale the x-axis to the max distance provided
     * max distance can be derived from the length of the number of bookings list
     * because each item in the number of bookings list represent a km interval
     * starting at 0->1.
     */
    let maxX = _binData.length;
    let x = d3.scale
      .linear()
      .domain([0, maxX])
      .range([0, width]);

    // generate histogram
    let data = d3.layout.histogram().bins(x.ticks(maxX))(dataset);

    //Axes and scales
    /** scale y-axis to the max number of bookings within a bin.
     * a bin in this context refers to the bin generated by d3 in {data}.
     */
    let yhist = d3.scale
      .linear()
      .domain([
        0,
        d3.max(data, function(d) {
          return d.y;
        })
      ])
      .range([height, 0]);
    // define x axis position
    let xAxis = d3.svg
      .axis()
      .scale(x)
      .orient("bottom");
    // define y axis position
    let yAxis = d3.svg
      .axis()
      .scale(yhist)
      .orient("left");
    //Draw svg
    let svg = d3
      .select(this.refs.canvas)
      .append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    //Draw histogram
    let bar = svg
      .selectAll(".bar")
      .data(data)
      .enter()
      .append("g")
      .attr("class", "bar")
      .attr("transform", function(d) {
        return "translate(" + x(d.x) + "," + yhist(d.y) + ")";
      });
    bar
      .append("rect")
      .attr("x", 1)
      .attr("width", x(data[0].dx) - x(0) - 1)
      .attr("height", function(d) {
        return height - yhist(d.y);
      });
    bar
      .append("text")
      .attr("dy", ".75em")
      .attr("y", -12)
      .attr("x", (x(data[0].dx) - x(0)) / 2)
      .attr("text-anchor", "middle")
      .text(function(d) {
        return formatCount(d.y);
      });
    //Draw axes
    svg
      .append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis)
      .append("text")
      .style("text-anchor", "end")
      .attr("x", width - 5)
      .attr("dy", "-.71em")
      .text("Km bins");
    svg
      .append("g")
      .attr("class", "y axis")
      .call(yAxis)
      .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Number of Bookings");
  }

  render() {
    return (
      <div>
        <Header as="h2">Histogram</Header>
        <div ref="canvas"></div>
      </div>
    );
  }
}

export default Histogram;
